/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */

// vanity gaps patch VVV
static const unsigned int gappih    = 10;       /* horiz inner gap between windows */
static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 10;       /* vert outer gap between windows and screen edge */
static const int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
// vanity gaps patch |||

static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */

// top bar patch vvv
static const int vertpad            = 10;       /* vertical padding of bar */
static const int sidepad            = 10;       /* horizontal padding of bar */
// top bar patch |||

static const char *fonts[]          = { "DepartureMono Nerd Font:size=14" };
static const char dmenufont[]       = "DepartureMono Nerd Font:size=14";
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char custom_neon[]	    = "#46E0DE";
static const char custom_neon1[]    = "#1f2335";
static const char testing[]    =      "#ffffff";
static const char *colors[][3]      = {
	/*               fg           bg            border      */
	/*            text left   bg color bar  window active   */
	/*            text middle fg color bar  window inactive */
	[SchemeNorm] = { custom_neon, custom_neon1, custom_neon1 },
	[SchemeSel]  = { custom_neon1, custom_neon, custom_neon  },
	// [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	// [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5"};

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", custom_neon, "-nf", custom_neon1, "-sb", custom_neon1, "-sf", custom_neon, NULL };
static const char *termcmd[]  = { "st", NULL };

static const Key keys[] = {
	/* modifier                     key        function        argument */
	// { MODKEY,                       XK_d,      spawn,          {.v = dmenucmd } },
	// { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	// { MODKEY,                       XK_b,      togglebar,      {0} },
	// { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	// { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	// { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	// { MODKEY|ShiftMask,             XK_i,      incnmaster,     {.i = -1 } },
	// { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	// { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
// vanity gaps patch ***
	// { MODKEY|Mod4Mask,              XK_h,      incrgaps,       {.i = +1 } },
	// { MODKEY|Mod4Mask,              XK_l,      incrgaps,       {.i = -1 } },
	// { MODKEY|Mod4Mask|ShiftMask,    XK_h,      incrogaps,      {.i = +1 } },
	// { MODKEY|Mod4Mask|ShiftMask,    XK_l,      incrogaps,      {.i = -1 } },
	// { MODKEY|Mod4Mask|ControlMask,  XK_h,      incrigaps,      {.i = +1 } },
	// { MODKEY|Mod4Mask|ControlMask,  XK_l,      incrigaps,      {.i = -1 } },
	// { MODKEY|Mod4Mask,              XK_0,      togglegaps,     {0} },
	// { MODKEY|Mod4Mask|ShiftMask,    XK_0,      defaultgaps,    {0} },
	// { MODKEY,                       XK_y,      incrihgaps,     {.i = +1 } },
	// { MODKEY,                       XK_o,      incrihgaps,     {.i = -1 } },
	// { MODKEY|ControlMask,           XK_y,      incrivgaps,     {.i = +1 } },
	// { MODKEY|ControlMask,           XK_o,      incrivgaps,     {.i = -1 } },
	// { MODKEY|Mod4Mask,              XK_y,      incrohgaps,     {.i = +1 } },
	// { MODKEY|Mod4Mask,              XK_o,      incrohgaps,     {.i = -1 } },
	// { MODKEY|ShiftMask,             XK_y,      incrovgaps,     {.i = +1 } },
	// { MODKEY|ShiftMask,             XK_o,      incrovgaps,     {.i = -1 } },
// vanity gaps patch **
	
	{ MODKEY,                       XK_Return, zoom,           {0} },
	//{ MODKEY,                       XK_Tab,    view,           {0} },
	// { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	// { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	// { MODKEY,                       XK_space,  setlayout,      {0} },
	//{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	//{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)

	// kill dwm
	{ MODKEY|ControlMask,           XK_q,      quit,           {0} },

	// kill window
	{ MODKEY,                       XK_q,      killclient,     {0} }, 

	// restart
	// { MODKEY|ShiftMask,             XK_r,      restart,        {0} }, // might prob

	// cycle through layout
	// { MODKEY,                       XK_comma,  cyclelayout,    {.i = -1 } }, // might be prob
	// { MODKEY,                       XK_period, cyclelayout,    {.i = +1 } },

	// reset layout to base
	{ MODKEY|ShiftMask,             XK_comma,  setlayout,      {.v = &layouts[0]} },

	// toggle to previous workspace
	{ MODKEY,                       XK_Tab,    view,           {0} },

	// rotate panes
	// { MODKEY,                           XK_k,       movestack,      {.i = +1 } }, // might be prob
	// { MODKEY,                           XK_j,       movestack,      {.i = -1 } },

	// chace pane sizes
	{ MODKEY|ShiftMask,                 XK_h,       setmfact,       {.f = -0.05} },
	{ MODKEY|ShiftMask,                 XK_l,       setmfact,       {.f = +0.05} },
	//{ MODKEY|ShiftMask,                 XK_j,       setcfact,       {.f = +0.25} }, // might be prob
	//{ MODKEY|ShiftMask,                 XK_k,       setcfact,       {.f = -0.25} },

	// shift view
	//{ MODKEY,                           XK_Left,    shiftview,      {.i = -1 } }, // might be a prob
	//{ MODKEY,                           XK_Right,   shiftview,      {.i = +1 } },

	// move focus clockwise/counter clockwise
	{ MODKEY,                           XK_space,   focusstack,     {.i = +1 } },
	{ MODKEY|ShiftMask,                 XK_space,   focusstack,     {.i = -1 } },

	// toggle stuff
	{ MODKEY,                           XK_b,       togglebar,      {0} },
	{ MODKEY,                           XK_g,       togglegaps,     {0} },

	// can be toggled with the mouse!!
	//{ MODKEY|ShiftMask,                 XK_f,       togglefloating, {0} },
	//{ MODKEY,                           XK_f,       togglefullscr,  {0} }, // might be a prob

	// start terminal
	{ MODKEY,                           XK_Return,  spawn,          {.v = termcmd }},
	{ MODKEY,                           XK_t,       spawn,          {.v = termcmd }},

	// start dmenu
	{ MODKEY,			    XK_d,       spawn,          {.v = dmenucmd } },

	// screenshot fullscreen and cropped (turned off for now)
	// {MODKEY,                            XK_Print,       spawn, SHCMD("scrot ~/screenshots/%b%d_%H%M%S.png")},
	// {MODKEY|ShiftMask,                  XK_Print,       spawn, SHCMD("scrot -s --freeze ~/screenshots/%b%d_%H%M%S.png")},
	// {MODKEY|ControlMask,                  XK_Print,       spawn, SHCMD("scrot -u ~/screenshots/%b%d_%H%M%S.png")},
	
	// set to monocle and remove bar
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_f,      togglebar,      {0} },
	{ MODKEY|ControlMask,           XK_f,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY|ControlMask,           XK_f,      togglebar,      {0} },




};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static const Button buttons[] = {
	/* click                event mask      button          function        argument */
	// { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	// { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	//{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

